x Issue with no CASCADE.ALL in the relationship between experience
and Achievement table. Hence, adding an achievement was not
automatically adding the experience to the exp.
- Solved by adding CascadeType.ALL in the OneToMany parameter in the
Experience entity.


 x Issue with Achievement controller route not having
 @RequestBody  annotation. Hence, the request body was not being
parsed correctly. Resulting in null values being inserted into the DB.
- Solved by adding the @RequestBody annotation to the controller route.


x Issue with the  @ManyToOne  annotation in the Skill & SkillCategory entity.
There was a circular reference between the two entities. Hence, the
response had a stack overflow error (recusive call).
- Solved by using @JsonManagedReference  and  @JsonBackReference  annotations.


x Normalizing the DB schema to reduce redundancy and improve performance
uo to 4NF.

x Note: After schema has been initialized first time,
you cant change the schema without dropping the tables.

x note: with css p .className doesnt work, use p.className instead.

Implemeteing Right sidebar: Thought of using a separate component for the
right sidebar, but it would be an overkill. Hence, decided to use a
one component for the right sidebar and used the children prop to
render the content of the right sidebar. Also, used different
components for the children of different routes. Used fallback
component for the side image. (Used defaultImg || fallbackImg)

discovered inner box shadows

discovered applying a style for dark mode only. In other words, applying
styles for different themes/modes.
Example:
/* Inner shadow for dark mode */
[data-theme="dark"] .workContainer {
  box-shadow: inset 0px 0px 2.5rem var(--shadow-color);
}

you can actually use your css variables in your jsx inline styles
Example:
<div style={{ boxShadow: `inset 0px 0px 2.5rem var(--shadow-color)` }}>

avoiding prop drilling by using context api

@CrossOrigin(origins = "http://localhost:3000") to allow requests from
the frontend to the backend.

Cannot read properties of undefined (reading 'map') 
TypeError: Cannot read properties of undefined (reading 'map')
*This can happen if an array in a response is not initialized yet
and you try to use it
SOLUTION: Check if the array is initialized before using it.
{experience.expRoles && Array.isArray(experience.expRoles) && experience.expRoles.map((role, index) =>

issue: one of the fields in ProjectContent entity was called 'order'
Everytime the application started it created all other tables except
the ProjectContent table. This was because 'order' is a reserved keyword
in SQL. Hence, the table was not created. To solve this, I changed the
field name from 'order' to 'contentOrder'.

issue: The project content was not being fetched from the DB.
This was because after dockerizing the application, the RDS DB was not
granting access to the application. Hence, the deployment to cloud run was
failing. 
To solve this, I added the IP address of the cloud run service
to the RDS security group. This allowed the cloud run service to access
the RDS DB. Also, I put a little too much trust in AI and did not check
the pom.xml. MySql driver was removed from the dependencies.

issue: app was failing to fetch secret from GCP Secret Manager. Did some
digging and found out that the service account used by the cloud run
service did not have the required permissions to access the secret. Also, 
I needed to setup GOOGLE_APPLICATION_CREDENTIALS in environment variables. The better
alternative was to gcloud auth application-default login. This would set the credentials
for the service account in the environment variables, less hassle.

@counter-style for making custom li counters

due to time, installing collapsible and not self-Implemeteing

Implemeted createUser, findByUser, and passwordEncoder in the UserService

Sometimes if the relation(OneToMany, ManyToOne) is too complex, it is better to
use a DTO to map the response to the frontend. This is because the response
might have a circular reference and the frontend might not be able to handle it, giving
issues like stack overflow error on the server. So you need to use a DTO, or JsonBackReference
over JsonIdentityInfo

challenge: I had to implement a featue where the admin can add content for a project.
The content can be text, image, video, link, or code, and can be added in any order. The content should be
previewable. 
Solution: I created an ImageService & Controller class to handle the image upload and retrieval from Cloudinary & the DB.
And then a Content model, service, and controller to handle the content creation and retrieval. The content

Issue: After deploying the spring boot server to the cloud (railway), the app was failing the build

Issue: with server filing to return skill categories.
This was because there were some rows rows that had null keys.
To solve this, I added a NonNull constraint to the skill category name.
And also a filter to remove null values from the response.
And then removed the null values from the DB.
Challenge: finding the error thorugh logs & digging through codebase to correct it.
