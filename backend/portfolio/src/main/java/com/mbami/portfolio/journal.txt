x Issue with no CASCADE.ALL in the relationship between experience
and Achievement table. Hence, adding an achievement was not
automatically adding the experience to the exp.
- Solved by adding CascadeType.ALL in the OneToMany parameter in the
Experience entity.


 x Issue with Achievement controller route not having
 @RequestBody  annotation. Hence, the request body was not being
parsed correctly. Resulting in null values being inserted into the DB.
- Solved by adding the @RequestBody annotation to the controller route.


x Issue with the  @ManyToOne  annotation in the Skill & SkillCategory entity.
There was a circular reference between the two entities. Hence, the
response had a stack overflow error (recusive call).
- Solved by using @JsonManagedReference  and  @JsonBackReference  annotations.


x Normalizing the DB schema to reduce redundancy and improve performance
uo to 4NF.

x Note: After schema has been initialized first time,
you cant change the schema without dropping the tables.

x note: with css p .className doesnt work, use p.className instead.

Implemeteing Right sidebar: Thought of using a separate component for the
right sidebar, but it would be an overkill. Hence, decided to use a
one component for the right sidebar and used the children prop to
render the content of the right sidebar. Also, used different
components for the children of different routes. Used fallback
component for the side image. (Used defaultImg || fallbackImg)

discovered inner box shadows

discovered applying a style for dark mode only. In other words, applying
styles for different themes/modes.
Example:
/* Inner shadow for dark mode */
[data-theme="dark"] .workContainer {
  box-shadow: inset 0px 0px 2.5rem var(--shadow-color);
}

you can actually use your css variables in your jsx inline styles
Example:
<div style={{ boxShadow: `inset 0px 0px 2.5rem var(--shadow-color)` }}>

avoiding prop drilling by using context api