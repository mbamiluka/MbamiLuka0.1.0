import React, { useState } from 'react';
import { arrayMove, SortableContainer, SortableElement } from 'react-sortable-hoc';

const SortableItem = SortableElement(({ value, onChange, onRemove }) => (
    <div>
        {value.contentType === 'text' && (
            <textarea
                placeholder="Enter text"
                value={value.content}
                onChange={(e) => onChange(value.id, e.target.value)}
            />
        )}
        {value.contentType === 'image' && (
            <input
                type="file"
                onChange={(e) => onChange(value.id, e.target.files[0])}
            />
        )}
        {value.contentType === 'video' && (
            <input
                type="text"
                placeholder="Enter video URL"
                value={value.content}
                onChange={(e) => onChange(value.id, e.target.value)}
            />
        )}
        {value.contentType === 'link' && (
            <>
                <input
                    type="text"
                    placeholder="Enter link URL"
                    value={value.content}
                    onChange={(e) => onChange(value.id, e.target.value)}
                />
                <input
                    type="text"
                    placeholder="Enter link text"
                    value={value.text}
                    onChange={(e) => onChange(value.id, e.target.value, 'text')}
                />
            </>
        )}
        {value.contentType === 'code' && (
            <textarea
                placeholder="Enter code"
                value={value.content}
                onChange={(e) => onChange(value.id, e.target.value)}
            />
        )}
        <button onClick={() => onRemove(value.id)}>Remove</button>
    </div>
));

const SortableList = SortableContainer(({ items, onChange, onRemove }) => {
    return (
        <div>
            {items.map((value, index) => (
                <SortableItem
                    key={`item-${value.id}`}
                    index={index}
                    value={value}
                    onChange={onChange}
                    onRemove={onRemove}
                />
            ))}
        </div>
    );
});

const ContentCreator = () => {
    const [contents, setContents] = useState([]);
    const [nextId, setNextId] = useState(1);

    const addContent = (contentType) => {
        setContents([...contents, { id: nextId, contentType, content: '', text: '' }]);
        setNextId(nextId + 1);
    };

    const handleContentChange = (id, value, field = 'content') => {
        setContents(contents.map(content => content.id === id ? { ...content, [field]: value } : content));
    };

    const handleRemoveContent = (id) => {
        setContents(contents.filter(content => content.id !== id));
    };

    const onSortEnd = ({ oldIndex, newIndex }) => {
        setContents(arrayMove(contents, oldIndex, newIndex));
    };

    const handleSubmit = () => {
        // Serialize and send the contents to the backend
        console.log(contents);
        // Example: fetch('/api/save', { method: 'POST', body: JSON.stringify(contents) });
    };

    return (
        <div>
            <button onClick={() => addContent('text')}>Add Text</button>
            <button onClick={() => addContent('image')}>Add Image</button>
            <button onClick={() => addContent('video')}>Add Video</button>
            <button onClick={() => addContent('link')}>Add Link</button>
            <button onClick={() => addContent('code')}>Add Code</button>
            <SortableList items={contents} onSortEnd={onSortEnd} onChange={handleContentChange} onRemove={handleRemoveContent} />
            <button onClick={handleSubmit}>Save</button>
        </div>
    );
};

export default ContentCreator;