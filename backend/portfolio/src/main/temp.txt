import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import Tag from '../atoms/Tag';

const AddProject = () => {
    const [skills, setSkills] = useState([]);
    const [selectedSkills, setSelectedSkills] = useState([]);
    const [error, setError] = useState('');
    const [isLoaded, setIsLoaded] = useState(false);
    const [msg, setMsg] = useState('');
    const [categories, setCategories] = useState([]);
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [experiences, setExperiences] = useState([]);
    const [expRoles, setExpRoles] = useState([]);
    const [selectedExpRoles, setSelectedExpRoles] = useState([]);
    const [selectedExperience, setSelectedExperience] = useState(null);

    let token = localStorage.getItem('token');

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [skillsResponse, categoriesResponse, expResponse, expRoleResp] = await Promise.all([
                    fetch('http://localhost:8080/api/v1/skills', {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    }),
                    fetch('http://localhost:8080/api/v1/skillCategory', {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    }),
                    fetch('http://localhost:8080/api/v1/experience', {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    }),
                    fetch('http://localhost:8080/api/v1/expRole', {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    })
                ]);

                const skillsData = await skillsResponse.json();
                const categoriesData = await categoriesResponse.json();
                const expData = await expResponse.json();
                const expRoleData = await expRoleResp.json();

                setSkills(skillsData.map(skill => ({ value: skill.id, label: skill.name })));
                setCategories(categoriesData.map(category => ({ value: category.id, label: category.name })));
                setExperiences(expData.map(exp => ({ value: exp.id, label: exp.name })));
                setExpRoles(expRoleData.map(role => ({ value: role.id, label: role.name })));
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    }, [token]);

    const handleSkillChange = (selectedOptions) => {
        setSelectedSkills(selectedOptions.map(option => ({ id: option.value })));
    };

    const handleCategoryChange = (selectedOptions) => {
        setSelectedCategories(selectedOptions.map(option => ({ id: option.value })));
    };

    const handleExperienceChange = (selectedOption) => {
        setSelectedExperience({ id: selectedOption.value });
    };

    const handleExpRoleChange = (selectedOptions) => {
        setSelectedExpRoles(selectedOptions.map(option => ({ id: option.value })));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const name = formData.get('name');
        const description = formData.get('description');
        const start = formData.get('start');
        const end = formData.get('end');
        const demo = formData.get('demo');
        const sourceCode = formData.get('sourceCode');
        const image = formData.get('image');
        const type = formData.get('type');
        const status = formData.get('status');

        const project = {
            name,
            description,
            start,
            end,
            demo,
            sourceCode,
            image,
            type,
            status,
            skills: selectedSkills,
            categories: selectedCategories,
            projectExperience: selectedExperience,
            projectExpRoles: selectedExpRoles
        };

        try {
            const response = await fetch('http://localhost:8080/api/v1/projects', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(project)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to add project');
            }

            const data = await response.json();
            setMsg('Project added successfully');
            console.log('Project added successfully:', data);
        } catch (error) {
            console.error('Error adding project:', error);
            setMsg(error.message);
        }
    };

    return (
        <div>
            <h3>Add Project</h3>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>Project Name:</label>
                    <input type="text" name="name" required />
                </div>
                <div>
                    <label>Project Description:</label>
                    <textarea name="description" />
                </div>
                <div>
                    <label>Start:</label>
                    <input type="date" name="start" />
                </div>
                <div>
                    <label>End:</label>
                    <input type="date" name="end" />
                </div>
                <div>
                    <label>Demo Url:</label>
                    <input type="text" name="demo" />
                </div>
                <div>
                    <label>Source Code Url:</label>
                    <input type="text" name="sourceCode" />
                </div>
                <div>
                    <label>Image:</label>
                    <input type="file" name="image" />
                </div>
                <div>
                    <label>Type:</label>
                    <select name="type">
                        <option value="1">Personal</option>
                        <option value="2">Corporate</option>
                        <option value="3">Academic</option>
                        <option value="4">Open Source</option>
                    </select>
                </div>
                <div>
                    <label>Status:</label>
                    <select name="status">
                        <option value="1">ongoing</option>
                        <option value="2">completed</option>
                    </select>
                </div>
                <label>Project Skills:</label>
                <div>
                    <Select
                        isMulti
                        onChange={handleSkillChange}
                        options={skills}
                        placeholder="Select skills..."
                        styles={{
                            control: (styles) => ({
                                ...styles,
                                marginBottom: '3rem',
                            }),
                            menuPortalTarget: base => ({ ...base, zIndex: 99
                            })
                        }}
                        menuPortalTarget={document.body}
                    />
                </div>
                <label>Project Categories:</label>
                <div>
                    <Select
                        isMulti
                        onChange={handleCategoryChange}
                        options={categories}
                        placeholder="Select categories..."
                        styles={{
                            control: (styles) => ({
                                ...styles,
                                marginBottom: '3rem',
                            }),
                            menuPortalTarget: base => ({ ...base, zIndex: 99
                            })
                        }}
                        menuPortalTarget={document.body}
                    />
                </div>
                <label>Project Experience:</label>
                <div>
                    <Select
                        onChange={handleExperienceChange}
                        options={experiences}
                        placeholder="Select experience..."
                        styles={{
                            control: (styles) => ({
                                ...styles,
                                marginBottom: '3rem',
                            }),
                            menuPortalTarget: base => ({ ...base, zIndex: 99
                            })
                        }}
                        menuPortalTarget={document.body}
                    />
                </div>
                <label>Project Experience Roles:</label>
                <div>
                    <Select
                        isMulti
                        onChange={handleExpRoleChange}
                        options={expRoles}
                        placeholder="Select experience roles..."
                        styles={{
                            control: (styles) => ({
                                ...styles,
                                marginBottom: '3rem',
                            }),
                            menuPortalTarget: base => ({ ...base, zIndex: 99
                            })
                        }}
                        menuPortalTarget={document.body}
                    />
                </div>
                <div><button type="submit">Add Project</button></div>
            </form>
            <div>
                {msg && <p>{msg}</p>}
            </div>
        </div>
    );
};

export default AddProject;